<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<title>PaperPass 最权威中文论文抄袭检测系统</title>
<style type="text/css">
<!--
user_icon {
color: #FFFFFF;
}
html
{
overflow-x:hidden;
overflow-y:auto;
}
body,td,th {
font-family: "微软雅黑";
font-size: 12px;
}
h1,h2,h3,h4,h5,h6 {
font-family: "宋体";
}
p{
margin-bottom:10px;
}
demo_padding {
line-height: 30px;
}
.zhengwen {
padding-right: 15px;
padding-left: 5px;
padding-bottom:100px;
font-size: 13px;
line-height: 20px;
color: #666666;
}
.zhengwencenter {
padding-right: 15px;
padding-left: 0px;
margin-bottom:10px;
font-size: 13px;
line-height: 20px;
color: #666666;
text-align:center
}
.neikuang {
background-color: #EBEBEB;
border: 1px solid #999999;
padding-right: 10px;
padding-left: 10px;
margin-top:10px;
margin-left:25px;
width:300px;
}
.shubu{
height: 20px;
width: 20px;
margin-left:25px;
background-color: #FFFFFF;
border: 1px solid #999999;
text-align: center;
vertical-align: middle;
display: block;
color: #666666;
}
a.red:link {color:#FF0000}
a.red:visited {color:#FF0000}
a.red:hover {color:#000000}
a.red:active {color:#000000}

a.orange:link {color:#FF6600}
a.orange:visited {color:#FF6600}
a.orange:hover {color:#000000}
a.orange:active {color:#000000}

a.dark:link {color:#666666}
a.dark:visited {color:#666666}
a.dark:hover {color:#000000}
a.dark:active {color:#000000}

a.pagelink:hover {color:#000000}
a.pagelink:active {color:#000000}

.green{color:#008000}
.gray{color:#666666}
.red{color:#FF0000}
.orange{color:#FF6600}
a{TEXT-DECORATION:none}

-->
</style>
</head>
<body>

<div class="zhengwen">
<div>
<span style="margin-left:25px"></span>
[
<a class="pagelink" href="paper_1.htm">首页</a>
<a class="pagelink" href="paper_4.htm">上一页</a>
<a class="pagelink" href="paper_6.htm">下一页</a>
<a class="pagelink" href="paper_8.htm">尾页</a>
页码：5/8页
]
</div>

<br><div style="margin-left:25px">

<img src="../../images/guanwang.gif"></div><br><br>
<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">41</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>MPSoC结构级热分析算法的验证实验5.1验证实验平台本文选择热分析软件 HotSpot（版本5.02）作为验证基准，</span><span class='green'>构建3个测例进行温度-功耗数据对比分析，从而检验所提出的模块级、核级、改良核级这3种热分析方法的精度与效率。</span><span class='green'>HotSpot软件以及三种热分析方法的运行平台为为配有Intel酷睿i7，8G 内存，运行Ubuntu 11.04 LTS操作系统的PC机。</span><span class='green'>5.2 验证实验所用到的测例测例1采用文献[17]策略， 将4个Alpha21264核心组合为一个4核处理器。</span><a href='../sentence_detail/626.htm' target='right' class='orange' >每个Alpha21264的处理核心核配有两块独享缓存L2 Right、L2 Left，4个核共享最后一级缓存L3。</a><span class='green'>芯片的布局为：</span><span class='green'>将处理核心放置于芯片的四个角落，每个核的独享缓存处于核的周围，而将共享缓存区置于芯片中心（这样做不仅考虑了处理单元的片上散热问题，</span><a href='../sentence_detail/629.htm' target='right' class='red' >也有利于通过功率较低的共享缓存，隔断功率较大的多个核相互之间的热交换影响）。</a><span class='green'>测例2采用Intel Sandy Bridge-E架构的8核高端CPU芯片[36]。</span><a href='../sentence_detail/631.htm' target='right' class='red' >该芯片核心面积为435平方毫米（长宽尺寸分别为20.9毫米、20.8毫米，基本呈正方形）。</a><span class='green'>本文中，我们按照Sandy Bridge-E i7-3960X的布局原则模拟生成了一种较为简略的芯片布局结构，整体平面图如图5.1所示，主要具有的模块为：</span><span class='green'>双精度数据输入输出模块（ DDR IO），最后一级缓存模块（ LLC），核心模块，快速互联通道模块（ QPI），</span><span class='green'>外设成员互联通道模块（ PCI- E），功耗控制单元模块（ PCU）等。</span><a href='../sentence_detail/635.htm' target='right' class='orange' >每个核心内的布局如图5.2所示，主要组成单元为：</a><span class='green'>执行单元模块（ Execution Unit），第一级数据缓存模块（ L1 Data Cache），指令获取和第一级指令缓存（ Instruction Fetch& L1 Cache），</span><span class='green'>内存序列与执行模块（ MemoryOrdering& Execution），分页单元模块（ Paging），乱序执行调度与退化模块（ Out- of- Order Scheduling& Retirement），</span><span class='green'>指令解码模块（ Instruction Decode& Microcode），分支预测模块（ Branch Prediction）。</span><span class='green'>315 MPSoC结构级热分析算法的验证实验图5.1测例二 i7-3960 X芯片布局325 MPSoC结构级热分析算法的</span><span class='green'>验证实验图5.2测例二 i7-3960 X核内的布局对于测例1和测例2，</span><span class='green'>进行类似的实验方案。</span><span class='green'>该方案过程如下：</span><span class='green'>根据表5.1中所示功率参数分配设置方案，首先重复地随机产生功耗分布；</span><span class='green'>然后，在考虑电热耦合效应的情况下，分别采用BlockTAM、CoreTAM和BlockInsideCoreTAM方法，获得每个功率分布的温度稳定分布；</span><a href='../sentence_detail/645.htm' target='right' class='orange' >最后将得到的结果与HotSpot的分析结果进行对比。</a><span class='green'>测例3基于测例1中采用过的Alpha21264核心，构建多个对于16核的虚拟芯片的布图规划。</span><a href='../sentence_detail/647.htm' target='right' class='orange' >为了模拟温敏布局规划过程，本文对各个布图方案进行热分析，在模拟过程中，测试本文方法的运行耗时或效率。</a><span class='green'>5.3 针对MPSoC结构级热分析算法精度的实验数据与分析正如前文所提到的，本文按照表5.1中设定的功率参数[18]，随机产生100个功率输入向量；</span><span class='green'>然后采用HotSpot、BlockTAM、BlockInsideCoreTAM、CoreTAM这4种热分析方法，测试各个核与功能模块的温度与静态功耗。</span><a href='../sentence_detail/650.htm' target='right' class='orange' >其中，一个核的静态功耗值等于所属模块的静态功耗值之和，这个核的局部热点温度是它的Core x模块温度。</a><a href='../sentence_detail/651.htm' target='right' class='orange' >本文以HotSpot的分析结果值作为基准，来计算其余3种方法的相对误差。</a><a href='../sentence_detail/652.htm' target='right' class='orange' >由于芯片的工作温度均是相对环境温度TAmb而言，所以使用式5-1来计算温度误差ET：</a><span class='green'>ET = |T ?</span><span class='green'>THotS potTHotS pot ?</span><span class='green'>TAmb| (5-1)其中THotS pot是HotSpot的测值，T是本文方法的温度计算值。</span><span class='green'>同时，采用式5-2来计算静态335 MPSoC结构级热分析算法的验证实验功耗误差EPlk：</span><span class='green'>EPlk = |Plk ?</span><span class='green'>PlkHotS potPlkHotS pot| (5-2)式5-2中PlkHotS pot是HotSpot的静态功耗测值，Plk是本文方法的静态功耗计算值。</span><span class='green'>3种方法的温度误差被列入表5.2[18]。</span><span class='green'>从表中不难看到，BlockTAM的精度最高，平均误差小于1.6%，最大误差小于5%；</span><span class='green'>BlockInsideCoreTAM的精确效果次之，平均误差小于4.2%，最大误差小于15%；</span><a href='../sentence_detail/662.htm' target='right' class='orange' >CorTAM的精度最低，平均误差达到33%，最大误差达到45%。</a><span class='green'>所以，BlockTAM和BlockInsideCoreTAM这2种方法均可以提供满意的热分析精度。</span><a href='../sentence_detail/664.htm' target='right' class='orange' >3种方法的静态功耗误差如表5.3所示[18]。</a><span class='green'>BlockTAM的精度最高， 最大误差小于0.5%；</span><span class='green'>BlockInsideCoreTAM的精度次之， 平均误差小于1.2%， 最大误差小于3.7%；</span><a href='../sentence_detail/667.htm' target='right' class='orange' >CorTAM的精度最低， 平均误差达到25%， 最大误差达到35%。</a><span class='green'>因此，BlockTAM和BlockInsideCoreTAM 2种方法均可以提供满意的静态功耗分析精度。</span><span class='green'>为了考察本文方法静态功耗与温度分析的误差来源，图5.3和图5.4[18]给出了本文3种方法对测例1中的各个模块，</span><a href='../sentence_detail/670.htm' target='right' class='red' >所产生的静态功耗与温度相对误差。</a><a href='../sentence_detail/671.htm' target='right' class='orange' >对本文3种方法的误差分析如下：</a><span class='green'>1) BlockTAM方法的误差分析：</span><span class='green'>由于BlockTAM是根据HotSpot软件的分析结果进行的自下而上的建模，所以具有与HotSpot软件最近分析精度。</span><span class='green'>如图5.3所示，各模块的静态功耗分析误差小于0.3%；</span><a href='../sentence_detail/675.htm' target='right' class='orange' >如图5.4所示，各模块的稳态温度分析误差小于4%。</a><span class='green'>2) CorTAM方法的误差分析：</span><a href='../sentence_detail/677.htm' target='right' class='orange' >在测例1中的一个核内，具有高功耗（高发热量）的Core x模块自然是高温模块，在其总功耗中，静态功耗所占的比例较高；</a><a href='../sentence_detail/678.htm' target='right' class='orange' >而其他3个模块（L2 x、L2 Left x、L2 Right x）是具有低功耗的低温模块，其静态功耗所占的比例也较低。</a><span class='green'>如图5.3所示，产生局部热点的Core x模块温度明显高于其他核内模块。</span><a href='../sentence_detail/680.htm' target='right' class='red' >CorTAM模型假设核中所有模块的温度均等于核的局部热点温度，这与事实有着较大的出入，导致其所计算出来的低温模块静态功耗被明显拉高，故而产生了11%-15%的较大误差。</a><span class='green'>另一方面来说，高温模块的温度就是核内的局部热点温度， CorTAM所计算出来的高温模块静态功耗也就理所应该较为精确（其相对误差小于2%）。</span><a href='../sentence_detail/682.htm' target='right' class='orange' >由于低温模块的静态功耗计算误差明显偏大，以核内所有模块功耗总和来计算核的局部热点温度就会产生较大的误差；</a><a href='../sentence_detail/683.htm' target='right' class='red' >如图5.4所示，其所产生的温度误差处于6%-8%之间，明显大于其他2种方法。</a><span class='green'>3) BlockInsideCoreTAM方法的误差分析：</span><a href='../sentence_detail/685.htm' target='right' class='orange' >该方法正视了核内模块温度之间具有着明显差别，所以，仅仅将核外模块作为一个影响整体进行考虑。</a><span class='green'>由于仅将热点之间的相345 MPSoC结构级热分析算法的验证实验表5.1本文测例各功能模块的面积与</span><span class='green'>功耗参数设定测例功能模块面积（ mm× mm）动态功率( w) Core x3×310-20 L2 left x5×31-</span><span class='green'>2.51 L2 x5×52-5 L2 right x3×51-2.5 DDR IO23×82-6.</span><span class='green'>5 MA3×42-6.5 DDR IO13×82-4.5 OSR x1×20-1 IDM x1×20-</span><span class='green'>1 L1 I x1×20-22 EU x2×21-8 L1 D x2×20.5-3 L2 x2×20.</span><span class='green'>5-4.5 LLC x4×32-6.5 PCU2×82-7.5 QPI3×122-7.</span><span class='green'>5 PCIE3×82-7.5表5.2多核芯片核内局部热点的温度计算误差对比 BlockTAM CoreTAM BlockInsideCoreTAMAvr. ET Max.</span><span class='green'>ET Avr. ET Max. ET Avr. ET Max. ET测例11.361%1.574%6.573%12.</span><span class='green'>851%2.223%2.259%测例21.447%4.864%33.063%45.840%4.</span><span class='green'>185%14.598%关热阻作为核间影响的系数，</span><span class='green'>所以该方法对于热点温度和静态功耗，可以提供较高的精度（如图5.3所示，各模块的静态功耗误差小于0.7%）；</span><span class='green'>但其对于核内低温模块的温度计算精度则较差（如图5.4所示，产生热点的高温模块的温度误差小于2.2%，但低温模块的温度误差则达到了5%-11%）。</span><span class='green'>355 MPSoC结构级热分析算法的验证实验表5.3多核芯片各核静态功耗的计算误差对比 BlockTAM CoreTAM BlockInsideCoreTAMAvr.</span><span class='green'>EPlk Max. EPlk Avr. EPlk Max. EPlk Avr. EPlk Max. EPlk测例10.314%0.327%</span><span class='green'>6.857%10.816%0.495%0.570%测例20.144%0.317%</span><span class='green'>25.123%35.084%1.196%3.687%表5.41000组热分析各算法计算耗时及</span><span class='green'>加速倍数 X对比分析算法 HotSpot BlockTAM CoreTAM BioCorTAMTAnls= s61.3011.2160.4140.927 TTotl= s61.</span><span class='green'>3014.6634.3744.374 XAnls BASE50.416147.96266.100 XTotl BASE13.14715.87614.014图5.</span><span class='green'>3对测例1中各模块的静态功耗计算误差365 MPSoC结构级热分析算法的验证实验图5.</span><span class='green'>4对测例1中各能模块峰值温度的计算误差5.4针对 MPSoC结构级热分析算法速度的</span><a href='../sentence_detail/706.htm' target='right' class='orange' >实验数据与分析本文采用16核的测例3（大测例）对其进行计算速度的验证。</a><span class='green'>3种方法需要采用 HotSpot软件对相关热阻的参数提取，由于芯片中有16个核、每核有4个模块，</span><a href='../sentence_detail/708.htm' target='right' class='orange' >所以本文方法需要进行64次 HotSpot模拟，这部分耗时被称为建模时间 TModel。</a><span class='green'>实验测试结果表明，TModel = 3:</span><span class='green'>447 秒（S）。</span><span class='green'>建模之后，本文方法基于这些参数，采用式4-5、4-9、式4-11对1000个输入功耗进行温度分析与静态功耗计算，</span><span class='green'>这部分耗时被称为热分析时间 TAnls；</span><a href='../sentence_detail/713.htm' target='right' class='orange' >建模时间与热分析时间两部分的总和被称为总耗时TTotl = TModel + TAnls。</a><a href='../sentence_detail/714.htm' target='right' class='orange' >本文方法所提供的加速倍数 X是 HotSpot的耗时与本文方法耗时之比，其中，不计入建模时间而只计入热分析计算耗时的加速比被称为热分析加速倍数 XAnls，</a><span class='green'>而总耗时加速倍数为 XTotl。</span><a href='../sentence_detail/716.htm' target='right' class='orange' >表5.4列出了耗时与各种加速比的计算结果。</a><a href='../sentence_detail/717.htm' target='right' class='red' >可以看出，本文方法的总耗时主要消耗在建模时间上；</a><span class='green'>只要提取出了模型参数，由于本文的模型复杂度很低，采用式4-5、4-9、式4-11计算温度与静态功耗就是一个非常快速的计算过程（即 TAnls非常小，</span><span class='green'>只占 TTotl很小的部分）。</span><span class='green'>与HotSpot软件相比，本文3种方法分析计算的加速比XAnls分别达到50、147、和66；</span><a href='../sentence_detail/721.htm' target='right' class='red' >但考虑到TAnls只占TTotl很小的部分，所以本文3种方法总耗时的加速比只能达到13、15、和14。</a><a href='../sentence_detail/722.htm' target='right' class='orange' >从表5.2-表5.4的算法精度与复杂度的比较结果[18]可以看出：</a><span class='green'>与 HotSpot软件相比，本文的 BlockTAM和 BlockInsideCoreTAM在满足精度要求的前提下（热点温度误差小375 MPSoC结构级热分析算法的验证实验于2.2%），</span><a href='../sentence_detail/724.htm' target='right' class='orange' >获得了满意的加速效果，总耗时的可以达到13倍和14倍的加速效果。</a><a href='../sentence_detail/725.htm' target='right' class='orange' >5.5小结第4章中，采用自下而上的建模方法对 MPSoC结构级热分析方法进行了探索，</a><a href='../sentence_detail/726.htm' target='right' class='red' >同时提出了3种具有不同算法复杂度与精度的热分析方法：</a><a href='../sentence_detail/727.htm' target='right' class='red' >模块级方法BlockTAM、核级方法CorTAM、考虑本核内模块相互影响的改良核级方法BlockInsideCoreTAM。</a><span class='green'>这三种算法之所以能在保证分析计算精度的前提下、获得比较好的加速效果，归根结底是因为对整个芯片的热分析模型从结构级进行了合理适度的等效简化。</span><span class='green'>本章对第4章中所提出的各种算法进行了大量的实验验证。</span><span class='green'>实验数据数据表明：</span><span class='green'>对核数较多MPSoC进行热分析的时候，BlockTAM和BlockInsideCoreTAM均具有算法复杂度低和精度高的优点：</span><a href='../sentence_detail/732.htm' target='right' class='orange' >平均相对增量误差最大不超过3%，同时可以获得14倍左右的运算加速效果。</a><span class='green'>386</span>
</p>
</div>


<div>
<span style="margin-left:25px"></span>
[
<a class="pagelink" href="paper_1.htm">首页</a>
<a class="pagelink" href="paper_4.htm">上一页</a>
<a class="pagelink" href="paper_6.htm">下一页</a>
<a class="pagelink" href="paper_8.htm">尾页</a>
页码：5/8页
]
</div>

</div>

<div class="zhengwencenter">
<p>
检测报告由<a href="http://www.paperpass.com/" target="_blank">PaperPass</a>文献相似度检测系统生成
</p>
<p>
Copyright © 2007-2013 PaperPass
</p>
</div>
<div style="margin-bottom:400px"></div>
</body>
</html>
